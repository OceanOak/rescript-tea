// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Tea_sub = require("./tea_sub.js");
var Tea_task = require("./tea_task.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var Dom_storage = require("rescript/lib/js/dom_storage.js");
var Caml_js_exceptions = require("rescript/lib/js/caml_js_exceptions.js");

function renderEvent(keyOpt, msg) {
  var key = keyOpt !== undefined ? keyOpt : "";
  var enableCall = function (callbacks) {
    Curry._1(callbacks.on, {
          TAG: /* AddRenderMsg */0,
          _0: msg
        });
    return function (param) {
      return Curry._1(callbacks.on, {
                  TAG: /* RemoveRenderMsg */1,
                  _0: msg
                });
    };
  };
  return Tea_sub.registration(key, enableCall);
}

var length = /* Task */{
  _0: (function (cb) {
      try {
        return Curry._1(cb, {
                    TAG: /* Ok */0,
                    _0: localStorage.length
                  });
      }
      catch (raw_exn){
        var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
        if (exn.RE_EXN_ID === "Not_found") {
          return Curry._1(cb, {
                      TAG: /* Error */1,
                      _0: "localStorage is not available"
                    });
        }
        throw exn;
      }
    })
};

var clear = /* Task */{
  _0: (function (cb) {
      try {
        return Curry._1(cb, {
                    TAG: /* Ok */0,
                    _0: (localStorage.clear(), undefined)
                  });
      }
      catch (raw_exn){
        var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
        if (exn.RE_EXN_ID === "Not_found") {
          return Curry._1(cb, {
                      TAG: /* Error */1,
                      _0: "localStorage is not available"
                    });
        }
        throw exn;
      }
    })
};

function clearCmd(param) {
  return Tea_task.attemptOpt((function (param) {
                
              }), clear);
}

function key(idx) {
  return /* Task */{
          _0: (function (cb) {
              var obj = localStorage;
              var value = Caml_option.null_to_opt(obj.key(idx));
              if (value !== undefined) {
                return Curry._1(cb, {
                            TAG: /* Ok */0,
                            _0: value
                          });
              } else {
                return Curry._1(cb, {
                            TAG: /* Error */1,
                            _0: "localStorage is not available"
                          });
              }
            })
        };
}

function getItem(key) {
  return /* Task */{
          _0: (function (cb) {
              var obj = localStorage;
              var value = Caml_option.null_to_opt(obj.getItem(key));
              if (value !== undefined) {
                return Curry._1(cb, {
                            TAG: /* Ok */0,
                            _0: value
                          });
              } else {
                return Curry._1(cb, {
                            TAG: /* Error */1,
                            _0: "localStorage is not available"
                          });
              }
            })
        };
}

function removeItem(key) {
  return /* Task */{
          _0: (function (cb) {
              try {
                var obj = localStorage;
                return Curry._1(cb, {
                            TAG: /* Ok */0,
                            _0: (obj.removeItem(key), undefined)
                          });
              }
              catch (raw_exn){
                var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
                if (exn.RE_EXN_ID === "Not_found") {
                  return Curry._1(cb, {
                              TAG: /* Error */1,
                              _0: "localStorage is not available"
                            });
                }
                throw exn;
              }
            })
        };
}

function removeItemCmd(key) {
  return Tea_task.attemptOpt((function (param) {
                
              }), removeItem(key));
}

function setItem(key, value) {
  return /* Task */{
          _0: (function (cb) {
              try {
                return Curry._1(cb, {
                            TAG: /* Ok */0,
                            _0: Dom_storage.setItem(key, value, localStorage)
                          });
              }
              catch (raw_exn){
                var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
                if (exn.RE_EXN_ID === "Not_found") {
                  return Curry._1(cb, {
                              TAG: /* Error */1,
                              _0: "localStorage is not available"
                            });
                }
                throw exn;
              }
            })
        };
}

function setItemCmd(key, value) {
  return Tea_task.attemptOpt((function (param) {
                
              }), setItem(key, value));
}

var LocalStorage = {
  length: length,
  clear: clear,
  clearCmd: clearCmd,
  key: key,
  getItem: getItem,
  removeItem: removeItem,
  removeItemCmd: removeItemCmd,
  setItem: setItem,
  setItemCmd: setItemCmd
};

exports.renderEvent = renderEvent;
exports.LocalStorage = LocalStorage;
/* No side effect */
